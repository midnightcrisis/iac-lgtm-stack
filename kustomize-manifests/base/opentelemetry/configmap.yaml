apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: monitoring
data:
  otel-collector-config.yaml: |
    receivers:
      # OTLP receiver for all telemetry types
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      # Kubernetes metrics
      k8s_cluster:
        auth_type: serviceAccount
        node_conditions_to_report: ["Ready", "MemoryPressure", "DiskPressure"]
        allocatable_types_to_report: ["cpu", "memory", "storage", "ephemeral-storage"]
      
      # Kubelet metrics
      kubeletstats:
        auth_type: serviceAccount
        endpoint: "https://${K8S_NODE_NAME}:10250"
        insecure_skip_verify: true
        metric_groups:
          - node
          - pod
          - container
      
      # Container logs
      filelog:
        include: ["/var/log/pods/*/*/*.log"]
        exclude: ["/var/log/pods/monitoring_*/*/*.log"]
        include_file_path: true
        include_file_name: false
        operators:
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            timestamp:
              parse_from: attributes.time
              layout: "2006-01-02T15:04:05.000000000-07:00"
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: json_parser
            id: parser-docker
            timestamp:
              parse_from: attributes.time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          - type: move
            from: attributes.log
            to: body
          - type: remove
            field: attributes.time
          - type: remove
            field: attributes.stream
          - type: remove
            field: attributes.logtag
      
      # Jaeger for backwards compatibility
      jaeger:
        protocols:
          thrift_http:
            endpoint: 0.0.0.0:14268
          grpc:
            endpoint: 0.0.0.0:14250
      
      # Zipkin for backwards compatibility
      zipkin:
        endpoint: 0.0.0.0:9411
      
      # Prometheus metrics from pods
      prometheus:
        config:
          scrape_configs:
            - job_name: 'kubernetes-pods'
              kubernetes_sd_configs:
                - role: pod
                  namespaces:
                    names:
                      - frontend
                      - backend
                      - ingress
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__
    
    processors:
      # Add k8s metadata
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
          labels:
            - tag_name: app
              key: app
            - tag_name: component
              key: component
          annotations:
            - tag_name: workload
              key: workload.opentelemetry.io/name
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
      
      # Resource detection
      resourcedetection:
        detectors: [env, system, docker, kubernetes]
        timeout: 5s
        override: false
      
      # Resource attributes
      resource:
        attributes:
          - key: cluster.name
            value: "gke-cluster"
            action: insert
          - key: environment
            value: "staging"
            action: insert
      
      # Batch processing
      batch:
        timeout: 10s
        send_batch_size: 1024
      
      # Memory limiter
      memory_limiter:
        check_interval: 1s
        limit_mib: 512
        spike_limit_mib: 128
    
    exporters:
      # Export traces to Tempo
      otlp/tempo:
        endpoint: "tempo.monitoring.svc.cluster.local:4317"
        tls:
          insecure: true
      
      # Export metrics to Prometheus
      prometheusremotewrite:
        endpoint: "http://prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
        resource_to_telemetry_conversion:
          enabled: true
      
      # Export logs to Loki
      loki:
        endpoint: "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
        labels:
          attributes:
            namespace: "k8s.namespace.name"
            pod: "k8s.pod.name"
            container: "k8s.container.name"
            node: "k8s.node.name"
    
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      zpages:
        endpoint: 0.0.0.0:55679
      pprof:
        endpoint: 0.0.0.0:1777
    
    service:
      extensions: [health_check, zpages, pprof]
      pipelines:
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [k8sattributes, resourcedetection, resource, batch, memory_limiter]
          exporters: [otlp/tempo]
        metrics:
          receivers: [otlp, prometheus, k8s_cluster, kubeletstats]
          processors: [k8sattributes, resourcedetection, resource, batch, memory_limiter]
          exporters: [prometheusremotewrite]
        logs:
          receivers: [otlp, filelog]
          processors: [k8sattributes, resourcedetection, resource, batch, memory_limiter]
          exporters: [loki]
